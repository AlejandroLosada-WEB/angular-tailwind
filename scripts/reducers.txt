import { createReducer, on } from '@ngrx/store'
import { User } from './user.model'
import {
  loadUsersSuccess,
  findUserByIdSuccess,
  createUserSuccess,
  updateUserSuccess,
  deleteUserSuccess,
} from './user.actions'

export interface UserState {
  users: User[]
  loading: boolean
  error: string | null
}

export const initialState: UserState = {
  users: [],
  loading: false,
  error: null,
}

export const userReducer = createReducer(
  initialState,
  on(loadUsersSuccess, (state, { users }) => ({ ...state, users })),
  on(findUserByIdSuccess, (state, { user }) => ({
    ...state,
    users: state.users.map((u) => (u.id === user.id ? user : u)),
  })),
  on(createUserSuccess, (state, { user }) => ({
    ...state,
    users: [...state.users, user],
  })),
  on(updateUserSuccess, (state, { user }) => ({
    ...state,
    users: state.users.map((u) => (u.id === user.id ? user : u)),
  })),
  on(deleteUserSuccess, (state, { id }) => ({
    ...state,
    users: state.users.filter((u) => u.id !== id),
  }))
)
